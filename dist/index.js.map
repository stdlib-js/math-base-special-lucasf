{
  "version": 3,
  "sources": ["../lib/lucas.json", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["[2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199, 322, 521, 843, 1364, 2207, 3571, 5778, 9349, 15127, 24476, 39603, 64079, 103682, 167761, 271443, 439204, 710647, 1149851, 1860498, 3010349, 4870847, 7881196, 12752043]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isNonNegativeIntegerf = require( '@stdlib/math-base-assert-is-nonnegative-integerf' );\nvar MAX_LUCAS = require( '@stdlib/constants-float32-max-safe-nth-lucas' );\nvar LUCAS = require( './lucas.json' );\n\n\n// MAIN //\n\n/**\n* Computes the nth Lucas number as a single-precision floating-point number.\n*\n* @param {NonNegativeInteger} n - the Lucas number to compute\n* @returns {NonNegativeInteger} Lucas number\n*\n* @example\n* var y = lucasf( 0 );\n* // returns 2\n*\n* @example\n* var y = lucasf( 1 );\n* // returns 1\n*\n* @example\n* var y = lucasf( 2 );\n* // returns 3\n*\n* @example\n* var y = lucasf( 3 );\n* // returns 4\n*\n* @example\n* var y = lucasf( 4 );\n* // returns 7\n*\n* @example\n* var y = lucasf( 5 );\n* // returns 11\n*\n* @example\n* var y = lucasf( 6 );\n* // returns 18\n*\n* @example\n* var y = lucasf( NaN );\n* // returns NaN\n*\n* @example\n* var y = lucasf( 3.14 );\n* // returns NaN\n*\n* @example\n* var y = lucasf( -1.0 );\n* // returns NaN\n*/\nfunction lucasf( n ) {\n\tif (\n\t\tisnanf( n ) ||\n\t\t!isNonNegativeIntegerf( n ) ||\n\t\tn > MAX_LUCAS\n\t) {\n\t\treturn NaN;\n\t}\n\treturn LUCAS[ n ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = lucasf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the nth Lucas number as a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-lucasf\n*\n* @example\n* var lucasf = require( '@stdlib/math-base-special-lucasf' );\n*\n* var y = lucasf( 0 );\n* // returns 2\n*\n* y = lucasf( 1 );\n* // returns 1\n*\n* y = lucasf( 2 );\n* // returns 3\n*\n* y = lucasf( 3 );\n* // returns 4\n*\n* y = lucasf( 4 );\n* // returns 7\n*\n* y = lucasf( 5 );\n* // returns 11\n*\n* y = lucasf( 6 );\n* // returns 18\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAQ,ICApN,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAwB,QAAS,kDAAmD,EACpFC,EAAY,QAAS,8CAA+C,EACpEC,EAAQ,IAmDZ,SAASC,EAAQC,EAAI,CACpB,OACCL,EAAQK,CAAE,GACV,CAACJ,EAAuBI,CAAE,GAC1BA,EAAIH,EAEG,IAEDC,EAAOE,CAAE,CACjB,CAKAN,EAAO,QAAUK,ICtCjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_lucas", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isnanf", "isNonNegativeIntegerf", "MAX_LUCAS", "LUCAS", "lucasf", "n", "main"]
}
